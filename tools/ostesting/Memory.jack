// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array heap;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048; //heap base
        let freeList = 2048;
        let freeList[0] = 0;
        let freeList[1] = 14335;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int sizeOfBlock;
        var int retAddress;
        var int blockOverhead;
        let sizeOfBlock = size + 2;
        // go to freelist and see if the length of free list fits the block 
        // that is being asked for
        if (freeList[1] > sizeOfBlock){
            let retAddress = freeList + 1 + freeList[1] - size + 1;
            let blockOverhead = retAddress - 2;
            let blockOverhead[0] = 0;
            let blockOverhead[1] = size;
            // change the length of the current freelist.
            let freeList[1] = freeList[1] - sizeOfBlock;
            // return freelist pointer to the heap base
            let freeList = heap;
            return retAddress;
        }
        // if the current block is not big enough, check if it's the end of the list. if it is, return something like " not enough memory". If it's not the end, then go the next member of the list.
        else {
            if (freeList[0] = 0){
                let freeList = 2048;
                do Output.printString("No memory available!");
                return 0;
            }
            // point to the next freelist address.
            else {
                let freeList = freeList[0];
                return Memory.alloc(size);
            }
        }
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int blockOverhead; 
        while (~(freeList[0] = 0)) {
            let freeList = freeList[0];
        }
        let blockOverhead = o - 2;
        let freeList[0] = blockOverhead;
        // go back to the first freelist
        let freeList = heap;
        return;
    }    
}
